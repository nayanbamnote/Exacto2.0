import React, { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Download, AlertTriangle } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useImportStore } from "@/stores/importStore";
import { Separator } from "@/components/ui/separator";

export function ImportCode() {
  const { importCode, importStatus, errorMessage } = useImportStore();
  const [codeInput, setCodeInput] = React.useState("");
  const [dialogOpen, setDialogOpen] = React.useState(false);

  const handleImportCode = () => {
    if (codeInput.trim() === "") {
      return;
    }
    
    importCode(codeInput);
  };

  // Reset form when dialog closes
  const handleDialogChange = (open: boolean) => {
    setDialogOpen(open);
    if (!open) {
      setCodeInput("");
      useImportStore.getState().setImportStatus('idle');
    }
  };
  
  // Auto-close dialog on successful import
  useEffect(() => {
    if (importStatus === 'success') {
      // Add a small delay to show success message before closing
      const timer = setTimeout(() => {
        setDialogOpen(false);
      }, 1500);
      
      return () => clearTimeout(timer);
    }
  }, [importStatus]);

  return (
    <TooltipProvider>
      <Dialog open={dialogOpen} onOpenChange={handleDialogChange}>
        <Tooltip>
          <TooltipTrigger asChild>
            <DialogTrigger asChild>
              <Button variant="ghost" size="icon">
                <Download className="h-5 w-5" />
              </Button>
            </DialogTrigger>
          </TooltipTrigger>
          <TooltipContent>
            <p>Import code</p>
          </TooltipContent>
        </Tooltip>

        <DialogContent className="sm:max-w-[900px] h-[80vh]">
          <DialogHeader className="space-y-3">
            <DialogTitle>Import HTML/CSS Code</DialogTitle>
            <DialogDescription>
              Paste the generated code below to import it back into the canvas.
            </DialogDescription>
            <Alert variant="warning" className="border-amber-500 bg-amber-50">
              <AlertTriangle className="h-4 w-4 text-amber-600" />
              <AlertTitle className="text-amber-600">Warning</AlertTitle>
              <AlertDescription className="text-amber-700">
                You can only import code that is generated by this tool only.
              </AlertDescription>
            </Alert>
            <Separator />
          </DialogHeader>

          <div className="flex-1 my-4 relative min-h-0">
            {importStatus === 'processing' && (
              <div className="flex items-center justify-center h-full">
                <div className="text-muted-foreground animate-pulse">Processing code...</div>
              </div>
            )}
            {importStatus === 'error' && (
              <div className="flex items-center justify-center mb-4">
                <div className="text-destructive">{errorMessage || 'Error processing code. Please try again.'}</div>
              </div>
            )}
            {importStatus === 'success' && (
              <div className="flex items-center justify-center mb-4">
                <div className="text-green-600">Code imported successfully! Dialog will close automatically...</div>
              </div>
            )}
            <ScrollArea className="h-[calc(80vh-280px)] rounded-md border">
              <Textarea
                value={codeInput}
                onChange={(e) => setCodeInput(e.target.value)}
                placeholder="Paste your code here..."
                className="font-mono text-sm border-0 resize-none h-full min-h-[300px] focus-visible:ring-0"
                disabled={importStatus === 'processing' || importStatus === 'success'}
              />
            </ScrollArea>
          </div>

          <DialogFooter className="flex items-center justify-between">
            <div className="text-sm text-muted-foreground">
              {importStatus === 'idle' && 'Make sure the code is generated by this tool only'}
            </div>
            <Button
              onClick={handleImportCode}
              disabled={importStatus === 'processing' || importStatus === 'success' || codeInput.trim() === ""}
            >
              Import Code
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </TooltipProvider>
  );
} 