import React, { useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Download } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Textarea } from "@/components/ui/textarea";
import { useImportStore } from "@/stores/importStore";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";

export function ImportCode() {
  const { importCode, importStatus, errorMessage } = useImportStore();
  const [codeInput, setCodeInput] = React.useState("");
  const [dialogOpen, setDialogOpen] = React.useState(false);

  const handleImportCode = () => {
    if (codeInput.trim() === "") {
      return;
    }
    
    // We don't need a try/catch here anymore since the store handles errors
    // The error handling is done in the importStore's importCode function
    importCode(codeInput);
  };

  // Reset form when dialog closes
  const handleDialogChange = (open: boolean) => {
    setDialogOpen(open);
    if (!open) {
      resetForm();
    }
  };
  
  const resetForm = () => {
    setCodeInput("");
    useImportStore.getState().setImportStatus('idle');
  };
  
  // Show toast notifications based on import status
  useEffect(() => {
    if (importStatus === 'error' && errorMessage) {
      // Handle specific error messages with more user-friendly toasts
      if (errorMessage.includes('Failed to parse HTML content')) {
        toast.error('Invalid code format. Please make sure to paste code generated by this tool.');
      } else if (errorMessage.includes('No elements with IDs found')) {
        toast.error('No valid elements found in the code. Please paste valid code.');
      } else {
        toast.error(errorMessage || 'Error processing code. Please try again.');
      }
    } else if (importStatus === 'success') {
      toast.success('Code imported successfully!');
      
      // Add a small delay to show success message before closing
      const timer = setTimeout(() => {
        setDialogOpen(false);
        resetForm();
      }, 1500);
      
      return () => clearTimeout(timer);
    }
  }, [importStatus, errorMessage]);

  return (
    <TooltipProvider>
      <Dialog open={dialogOpen} onOpenChange={handleDialogChange}>
        <Tooltip>
          <TooltipTrigger asChild>
            <DialogTrigger asChild>
              <Button variant="ghost" size="icon">
                <Download className="h-5 w-5" />
              </Button>
            </DialogTrigger>
          </TooltipTrigger>
          <TooltipContent>
            <p>Import code</p>
          </TooltipContent>
        </Tooltip>

        <DialogContent className="sm:max-w-[900px] max-h-[90vh] flex flex-col">
          <DialogHeader>
            <DialogTitle className="text-xl">Import HTML/CSS Code</DialogTitle>
            <DialogDescription className="mt-2">
              Paste the generated code below to import it back into the canvas.
            </DialogDescription>
            <Separator className="my-4" />
          </DialogHeader>

          <div className="flex-1 flex flex-col space-y-4 overflow-hidden">
            {importStatus === 'processing' && (
              <div className="flex items-center justify-center py-2">
                <div className="text-muted-foreground animate-pulse">Processing code...</div>
              </div>
            )}
            
            <ScrollArea className="w-full rounded-md border h-[300px]">
              <Textarea
                value={codeInput}
                onChange={(e) => setCodeInput(e.target.value)}
                placeholder="Paste your code here..."
                className="font-mono text-sm border-0 h-full focus-visible:ring-0"
                disabled={importStatus === 'processing' || importStatus === 'success'}
              />
            </ScrollArea>
          </div>

          <DialogFooter className="mt-6 flex items-center justify-between">
            <div className="text-sm text-muted-foreground">
              {importStatus === 'idle' && 'Only import code generated by this tool'}
            </div>
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                onClick={() => handleDialogChange(false)}
              >
                Cancel
              </Button>
              <Button
                onClick={handleImportCode}
                disabled={importStatus === 'processing' || importStatus === 'success' || codeInput.trim() === ""}
              >
                Import Code
              </Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </TooltipProvider>
  );
} 